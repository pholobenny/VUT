/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vut.gui;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import vut.data.DataStorageException;
import vut.data.MovieDA;
import vut.data.Movies;

/**
 *
 * @author benny
 */
public class MovieFinder extends javax.swing.JFrame {

    private Movies movies;
    private ArrayList<Movies> arMovies;

    /**
     * Creates new form MovieFinder
     */
    public MovieFinder() {
        initComponents();
        hidePanels();
        populateTitleCombo();
        groupRadioButtons();
    }

    public void hidePanels() {
        pnlSearchMovies.setVisible(false);
        pnlShowYear.setVisible(false);
        pnlUpdateOperation.setVisible(false);
    }

    public void populateTitleCombo() {
        try {
            movies = new Movies();
            movies.initiallize();
            for (String title : movies.retrieveTitles()) {
                cmbMovieTitle.addItem(title);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    public void groupRadioButtons() {
        ButtonGroup grp = new ButtonGroup();
        grp.add(rdbDirector);
        grp.add(rdbTitle);
        rdbDirector.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pnlTrasactionMenu = new javax.swing.JPanel();
        btnViewMoviesByReleaseYear = new javax.swing.JButton();
        btnAverageMoviePrice = new javax.swing.JButton();
        btnSearchMovieByDirectorTitle = new javax.swing.JButton();
        btnAddNewMovie = new javax.swing.JButton();
        btnEditMovieDetails = new javax.swing.JButton();
        btnRemoveMovie = new javax.swing.JButton();
        pnlMovieDetails = new javax.swing.JPanel();
        cmbMovieTitle = new javax.swing.JComboBox<>();
        lblTitle = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        lblDirector = new javax.swing.JLabel();
        txtDirector = new javax.swing.JTextField();
        lblReleaseYear = new javax.swing.JLabel();
        txtReleaseYear = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        pnlUpdateOperation = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPecentage = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        pnlSearchMovies = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        rdbDirector = new javax.swing.JRadioButton();
        rdbTitle = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        txtTitleOrDirectorName = new javax.swing.JTextField();
        btnGetMovies = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ttaMovies = new javax.swing.JTextArea();
        pnlShowYear = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        btnShowAll = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblBeforeYear = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblAfterYear = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taBefore = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        taAfter = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("MOVIE FINDER SOFTWARE");

        pnlTrasactionMenu.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION), "Transaction Menu", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        btnViewMoviesByReleaseYear.setText("View movies by release year");
        btnViewMoviesByReleaseYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMoviesByReleaseYearActionPerformed(evt);
            }
        });

        btnAverageMoviePrice.setText("Average Movie Price");
        btnAverageMoviePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAverageMoviePriceActionPerformed(evt);
            }
        });

        btnSearchMovieByDirectorTitle.setText("Search movie by director/title");
        btnSearchMovieByDirectorTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchMovieByDirectorTitleActionPerformed(evt);
            }
        });

        btnAddNewMovie.setText("Add new movie");
        btnAddNewMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewMovieActionPerformed(evt);
            }
        });

        btnEditMovieDetails.setText("Edit movie details");
        btnEditMovieDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMovieDetailsActionPerformed(evt);
            }
        });

        btnRemoveMovie.setText("Remove movie");
        btnRemoveMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMovieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTrasactionMenuLayout = new javax.swing.GroupLayout(pnlTrasactionMenu);
        pnlTrasactionMenu.setLayout(pnlTrasactionMenuLayout);
        pnlTrasactionMenuLayout.setHorizontalGroup(
            pnlTrasactionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTrasactionMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTrasactionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnViewMoviesByReleaseYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAverageMoviePrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearchMovieByDirectorTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddNewMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEditMovieDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTrasactionMenuLayout.setVerticalGroup(
            pnlTrasactionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTrasactionMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnViewMoviesByReleaseYear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAverageMoviePrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchMovieByDirectorTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAddNewMovie)
                .addGap(18, 18, 18)
                .addComponent(btnEditMovieDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemoveMovie)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMovieDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Movie Details"));

        cmbMovieTitle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Movie Title:" }));
        cmbMovieTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMovieTitleActionPerformed(evt);
            }
        });

        lblTitle.setText("Title:");

        lblDirector.setText("Director:");

        lblReleaseYear.setText("Release Year:");

        lblPrice.setText("Price (R):");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMovieDetailsLayout = new javax.swing.GroupLayout(pnlMovieDetails);
        pnlMovieDetails.setLayout(pnlMovieDetailsLayout);
        pnlMovieDetailsLayout.setHorizontalGroup(
            pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMovieDetailsLayout.createSequentialGroup()
                .addGroup(pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbMovieTitle, 0, 251, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMovieDetailsLayout.createSequentialGroup()
                        .addGroup(pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle)
                            .addComponent(lblDirector)
                            .addComponent(lblReleaseYear)
                            .addComponent(lblPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTitle)
                            .addComponent(txtDirector)
                            .addComponent(txtReleaseYear)
                            .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMovieDetailsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        pnlMovieDetailsLayout.setVerticalGroup(
            pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMovieDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbMovieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDirector)
                    .addComponent(txtDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblReleaseYear)
                    .addComponent(txtReleaseYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMovieDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlUpdateOperation.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Update Operation"));

        jLabel2.setText("Enter increase percentage:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUpdateOperationLayout = new javax.swing.GroupLayout(pnlUpdateOperation);
        pnlUpdateOperation.setLayout(pnlUpdateOperationLayout);
        pnlUpdateOperationLayout.setHorizontalGroup(
            pnlUpdateOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateOperationLayout.createSequentialGroup()
                .addGroup(pnlUpdateOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlUpdateOperationLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtPecentage))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUpdateOperationLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdate)))
                .addContainerGap())
        );
        pnlUpdateOperationLayout.setVerticalGroup(
            pnlUpdateOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpdateOperationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlUpdateOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPecentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnUpdate))
        );

        pnlSearchMovies.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Search movies by title or Director"));

        jTextField1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextField1.setText("Search by:");

        rdbDirector.setText("Director");

        rdbTitle.setText("Title");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Enter part of the title, or part of the director's name:");

        btnGetMovies.setText("Get Movies");
        btnGetMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetMoviesActionPerformed(evt);
            }
        });

        ttaMovies.setColumns(4);
        ttaMovies.setRows(5);
        ttaMovies.setText("Released Year\t\tTitile\t\tDirector\t\tPrice");
        jScrollPane2.setViewportView(ttaMovies);

        javax.swing.GroupLayout pnlSearchMoviesLayout = new javax.swing.GroupLayout(pnlSearchMovies);
        pnlSearchMovies.setLayout(pnlSearchMoviesLayout);
        pnlSearchMoviesLayout.setHorizontalGroup(
            pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(pnlSearchMoviesLayout.createSequentialGroup()
                        .addGroup(pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdbDirector)
                            .addComponent(rdbTitle))
                        .addGap(18, 18, 18)
                        .addGroup(pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlSearchMoviesLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(txtTitleOrDirectorName))
                            .addGroup(pnlSearchMoviesLayout.createSequentialGroup()
                                .addGroup(pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnGetMovies)
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        pnlSearchMoviesLayout.setVerticalGroup(
            pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSearchMoviesLayout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdbDirector)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlSearchMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdbTitle)
                            .addComponent(btnGetMovies)))
                    .addGroup(pnlSearchMoviesLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTitleOrDirectorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlShowYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("Enter a year");

        btnShowAll.setText("Show All");
        btnShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllActionPerformed(evt);
            }
        });

        jLabel5.setText("Movies released before");

        jLabel6.setText("Movies released after");

        taBefore.setColumns(4);
        taBefore.setRows(5);
        taBefore.setText("Released Year\t\tTitle\t\tDirector\t\tPrice\t");
        jScrollPane1.setViewportView(taBefore);

        taAfter.setColumns(20);
        taAfter.setRows(5);
        taAfter.setText("Released Year\t\tTitle\t\tDirector\t\tPrice\t");
        jScrollPane3.setViewportView(taAfter);

        javax.swing.GroupLayout pnlShowYearLayout = new javax.swing.GroupLayout(pnlShowYear);
        pnlShowYear.setLayout(pnlShowYearLayout);
        pnlShowYearLayout.setHorizontalGroup(
            pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlShowYearLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnShowAll)
                .addGap(158, 158, 158))
            .addGroup(pnlShowYearLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlShowYearLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(32, 32, 32)
                        .addComponent(lblBeforeYear))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlShowYearLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(60, 60, 60)
                        .addComponent(lblAfterYear))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlShowYearLayout.setVerticalGroup(
            pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlShowYearLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnShowAll))
                    .addComponent(jLabel4))
                .addGap(23, 23, 23)
                .addGroup(pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblBeforeYear)
                    .addComponent(jLabel6)
                    .addComponent(lblAfterYear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlShowYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlTrasactionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(pnlMovieDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlSearchMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlShowYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addComponent(pnlUpdateOperation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pnlTrasactionMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlMovieDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlUpdateOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlShowYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(644, 644, 644))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlSearchMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAverageMoviePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAverageMoviePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAverageMoviePriceActionPerformed

    private void cmbMovieTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMovieTitleActionPerformed
        System.out.println(cmbMovieTitle.getSelectedItem().toString());
        try {
            arMovies = movies.returnByTitle(cmbMovieTitle.getSelectedItem().toString());
            txtTitle.setText(arMovies.get(0).getTitle());
            txtDirector.setText(arMovies.get(0).getDirector());
            txtReleaseYear.setText(String.valueOf(arMovies.get(0).getRelease_year()));
            txtPrice.setText(String.valueOf(arMovies.get(0).getPrice()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_cmbMovieTitleActionPerformed

    private void btnViewMoviesByReleaseYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMoviesByReleaseYearActionPerformed
        pnlShowYear.setVisible(true);
    }//GEN-LAST:event_btnViewMoviesByReleaseYearActionPerformed

    private void btnGetMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetMoviesActionPerformed
        try {
            if (!txtTitleOrDirectorName.getText().toString().equalsIgnoreCase("")
                    || !txtTitleOrDirectorName.getText().toString().isEmpty()) {
                if (rdbDirector.isSelected()) {
                    arMovies = movies.returnByDirector(txtTitleOrDirectorName.getText().toString());
                    for (Movies m : arMovies) {
                        ttaMovies.append("\n" + m.getRelease_year() + "\t\t" + m.getTitle()
                                + "\t\t" + m.getDirector() + "\t\t" + m.getPrice());
                    }
                } else if (rdbTitle.isSelected()) {
                    System.out.println("Title");
                    arMovies = movies.returnByTitle(txtTitleOrDirectorName.getText().toString());
                    for (Movies m : arMovies) {
                        ttaMovies.append("\n" + m.getRelease_year() + "\t\t" + m.getTitle()
                                + "\t\t" + m.getDirector() + "\t\t" + m.getPrice());
                    }
                } else {
                    throw new IllegalArgumentException("Please select between Director or Title button to search");
                }

            } else {
                throw new IllegalArgumentException("Director or title field should not be empty");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnGetMoviesActionPerformed

    private void btnShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllActionPerformed
        try {
            if (!txtYear.getText().toString().equalsIgnoreCase("")
                    || !txtYear.getText().toString().isEmpty()) {
                arMovies = movies.producedAfter(Integer.parseInt(txtYear.getText()));
                for (Movies m : arMovies) {
                    taAfter.append("\n" + m.getRelease_year() + "\t\t" + m.getTitle()
                            + "\t\t" + m.getDirector() + "\t\t" + m.getPrice());
                }
                arMovies = new ArrayList<>();
                arMovies = movies.producedBefore(Integer.parseInt(txtYear.getText()));
                for (Movies m : arMovies) {
                    taBefore.append("\n" + m.getRelease_year() + "\t\t" + m.getTitle()
                            + "\t\t" + m.getDirector() + "\t\t" + m.getPrice());
                }
            } else {
                throw new IllegalArgumentException("Director or title feild should not be empty");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
            txtYear.setFocusable(true);
        }
    }//GEN-LAST:event_btnShowAllActionPerformed

    private void btnSearchMovieByDirectorTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchMovieByDirectorTitleActionPerformed
        pnlSearchMovies.setVisible(true);
    }//GEN-LAST:event_btnSearchMovieByDirectorTitleActionPerformed

    private void btnAddNewMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewMovieActionPerformed
        btnSave.setEnabled(true);
        cmbMovieTitle.setEnabled(false);
    }//GEN-LAST:event_btnAddNewMovieActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            if (txtTitle.getText().toString().equals("") && txtTitle.getText().toString().isEmpty()) {
                throw new IllegalArgumentException("Title should not be empty");
            } else if (txtDirector.getText().toString().equals("") || txtDirector.getText().toString().isEmpty()) {
                throw new IllegalArgumentException("Director should not be emtry");
            } else if (txtReleaseYear.getText().toString().equals("") || txtReleaseYear.getText().toString().isEmpty()) {
                throw new IllegalArgumentException("Release yea should not be empty");
            } else if (txtPrice.getText().toString().equals("") || txtPrice.getText().toString().isEmpty()) {
                throw new IllegalArgumentException("Price should not be empty");
            } else {
                movies = new Movies(txtTitle.getText().toString(), txtDirector.getText().toString(),
                        Integer.parseInt(txtReleaseYear.getText().toString()),
                        Double.parseDouble(txtPrice.getText().toString()));
                movies.addMovie(movies);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnEditMovieDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMovieDetailsActionPerformed
        pnlUpdateOperation.setVisible(true);
    }//GEN-LAST:event_btnEditMovieDetailsActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            if (txtPecentage.getText().toString().equals("") && txtPecentage.getText().toString().isEmpty()) {
                throw new IllegalArgumentException("Percentage should not be empty");
            } else {
                movies.updatePrice(Integer.parseInt(txtPecentage.getText().toString()));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMovieActionPerformed
        try {
            String t = JOptionPane.showInputDialog("Enter movie title to delete");
            System.out.println(t);
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int results = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + t + "?", "Warning", dialogButton);
            if (results == JOptionPane.YES_OPTION) {
                movies.deleteMovie(t);
            } 
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }//GEN-LAST:event_btnRemoveMovieActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieFinder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewMovie;
    private javax.swing.JButton btnAverageMoviePrice;
    private javax.swing.JButton btnEditMovieDetails;
    private javax.swing.JButton btnGetMovies;
    private javax.swing.JButton btnRemoveMovie;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchMovieByDirectorTitle;
    private javax.swing.JButton btnShowAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewMoviesByReleaseYear;
    private javax.swing.JComboBox<String> cmbMovieTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblAfterYear;
    private javax.swing.JLabel lblBeforeYear;
    private javax.swing.JLabel lblDirector;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblReleaseYear;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlMovieDetails;
    private javax.swing.JPanel pnlSearchMovies;
    private javax.swing.JPanel pnlShowYear;
    private javax.swing.JPanel pnlTrasactionMenu;
    private javax.swing.JPanel pnlUpdateOperation;
    private javax.swing.JRadioButton rdbDirector;
    private javax.swing.JRadioButton rdbTitle;
    private javax.swing.JTextArea taAfter;
    private javax.swing.JTextArea taBefore;
    private javax.swing.JTextArea ttaMovies;
    private javax.swing.JTextField txtDirector;
    private javax.swing.JTextField txtPecentage;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtReleaseYear;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextField txtTitleOrDirectorName;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
